# .github/workflows/02-docker-from-jar-dev.yml
# Build a Docker image from the JAR artifact and push to Dev; Xray image scan (non-blocking).

name: 02 — Docker from JAR (dev)

on:
  workflow_run:
    workflows: ["Build and Publish to JFrog Artifactory (with non-blocking Xray)"]   # Make sure this EXACTLY matches your Step-01 workflow name
    types: [completed]
  workflow_dispatch:
    inputs:
      commit:
        description: "Commit SHA to package (defaults to triggering run)"
        required: false

permissions:
  contents: read

jobs:
  package-docker:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      # JFrog settings (set in Repo → Settings → Variables)
      JF_URL:              ${{ vars.JF_URL }}                 # e.g., https://chirag095.jfrog.io
      JF_DOCKER_REGISTRY:  ${{ vars.JF_DOCKER_REGISTRY }}     # e.g., chirag095.jfrog.io
      DOCKER_DEV_REPO:     ${{ vars.DOCKER_DEV_REPO }}        # e.g., petclinic-demo
      IMAGE_NAME:          ${{ vars.IMAGE_NAME }}             # e.g., spring-petclinic (can be empty → defaulted)

      # Secrets
      JFROG_USER:          ${{ secrets.JFROG_USER }}
      JFROG_TOKEN:         ${{ secrets.JFROG_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Resolve source commit
        id: src
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${{ github.event.inputs.commit || '' }}" ]; then
            SHA="${{ github.event.inputs.commit }}"
          else
            SHA="${{ github.event.workflow_run.head_sha || github.sha }}"
          fi
          SHORT="${SHA::7}"
          echo "sha=${SHA}" >> "$GITHUB_OUTPUT"
          echo "short=${SHORT}" >> "$GITHUB_OUTPUT"

      # Download artifacts from Step-01 run, if present
      - name: Download JAR artifact from Step-01
        if: ${{ github.event_name == 'workflow_run' }}
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: 01 — Build & Publish JAR
          run_id: ${{ github.event.workflow_run.id }}
          path: ./inbox

      - name: Ensure inbox exists & list files
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ./inbox
          echo "Listing downloaded artifacts (if any):"
          find ./inbox -maxdepth 3 -type f -print | sed 's/^/ - /' || true

      - name: Prepare app.jar
        shell: bash
        run: |
          set -euo pipefail
          JAR=$(find ./inbox -type f -name "*.jar" | head -n1 || true)
          if [ -z "${JAR}" ]; then
            echo "::error::No JAR found under ./inbox. Make sure Step-01 uploaded a JAR artifact."
            exit 1
          fi
          cp "$JAR" app.jar
          echo "Picked JAR: $JAR"
          ls -la app.jar

      - name: Ensure IMAGE_NAME is set and valid
        shell: bash
        run: |
          set -euo pipefail
          IMG="${IMAGE_NAME:-}"
          if [ -z "$IMG" ]; then
            echo "IMAGE_NAME not set; defaulting to 'spring-petclinic'"
            IMG="spring-petclinic"
          fi
          # Enforce Docker name rules: lowercase, digits, separators . _ -
          if ! echo "$IMG" | grep -Eq '^[a-z0-9]+([._-][a-z0-9]+)*$'; then
            echo "::error::IMAGE_NAME '$IMG' is invalid. Use lowercase letters, digits, and separators . _ -"
            exit 1
          fi
          echo "IMAGE_NAME=$IMG" >> "$GITHUB_ENV"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to JFrog Docker registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.JF_DOCKER_REGISTRY }}
          username: ${{ env.JFROG_USER }}
          password: ${{ env.JFROG_TOKEN }}

      - name: Build & push image (dev) — from app.jar
        id: buildpush
        shell: bash
        run: |
          set -euo pipefail
          TAG1="${JF_DOCKER_REGISTRY}/${DOCKER_DEV_REPO}/${IMAGE_NAME}:git-${{ steps.src.outputs.short }}"
          TAG2="${JF_DOCKER_REGISTRY}/${DOCKER_DEV_REPO}/${IMAGE_NAME}:${GITHUB_REF_NAME}-latest"
          echo "Using tags:"
          echo " - $TAG1"
          echo " - $TAG2"

          docker buildx build \
            --platform linux/amd64 \
            -f docker/Dockerfile.from-jar \
            --build-arg BUILD_TS="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            --build-arg VCS_REF="${{ steps.src.outputs.sha }}" \
            --build-arg REPO_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}" \
            -t "$TAG1" -t "$TAG2" \
            --push .

          echo "tag1=$TAG1" >> "$GITHUB_OUTPUT"
          echo "tag2=$TAG2" >> "$GITHUB_OUTPUT"

      # Optional: Xray image scan (non-blocking). Keep if you want the report here too.
      - name: Install JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
      - name: Configure JFrog CLI server
        shell: bash
        run: |
          set -euo pipefail
          jf c add art --interactive=false --url "${JF_URL}" \
            --user "${JFROG_USER}" --password "${JFROG_TOKEN}" --overwrite=true
          jf c use art
      - name: Xray image scan (non-blocking, save JSON)
        continue-on-error: true
        shell: bash
        run: |
          set -euo pipefail
          IMG="${{ steps.buildpush.outputs.tag1 }}"
          echo "Scanning $IMG"
          if jf docker scan --help >/dev/null 2>&1; then
            jf docker scan "$IMG" --format=json > xray-image.json || true
          else
            jf scan "$IMG" --format=json > xray-image.json || true
          fi
          echo "Saved xray-image.json"

      - name: Upload scan report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xray-image-${{ steps.src.outputs.short }}
          path: xray-image.json
          if-no-files-found: warn

      - name: Summary
        shell: bash
        run: |
          {
            echo "### Dev image built from JAR"
            echo "- Commit: \`${{ steps.src.outputs.sha }}\`"
            echo "- Tags:"
            echo "  - \`${{ steps.buildpush.outputs.tag1 }}\`"
            echo "  - \`${{ steps.buildpush.outputs.tag2 }}\`"
            echo "- Xray image report (optional): \`xray-image.json\`"
          } >> "$GITHUB_STEP_SUMMARY"
