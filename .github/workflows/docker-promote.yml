# .github/workflows/docker-promote.yml
# Promote image from dev → prod in JFrog Artifactory (no rebuild), verify digest parity,
# and create a GitHub Release (v<version>) that maps release ↔ commit ↔ digests.

name: Docker — Promote to prod

on:
  workflow_dispatch:
    inputs:
      sourceTag:
        description: "Dev tag to promote (e.g., git-104c263)"
        required: true
      targetTag:
        description: "Prod tag (release version, e.g., 1.2.3). Leave blank to reuse sourceTag"
        required: false

permissions:
  contents: read

jobs:
  promote:
    runs-on: ubuntu-latest
    # We need write here to create the GitHub Release
    permissions:
      contents: write
    environment:
      name: prod   # Protect this env in GitHub → Settings → Environments → prod

    env:
      # Set these as Repository Variables (Settings → Variables):
      #   JF_URL=https://chirag095.jfrog.io
      #   JF_DOCKER_REGISTRY=chirag095.jfrog.io
      #   DOCKER_DEV_REPO=docker-petclinic-dev
      #   DOCKER_PROD_REPO=docker-petclinic-prod
      JF_URL:              ${{ vars.JF_URL }}
      JF_DOCKER_REGISTRY:  ${{ vars.JF_DOCKER_REGISTRY }}
      DOCKER_DEV_REPO:     ${{ vars.DOCKER_DEV_REPO }}
      DOCKER_PROD_REPO:    ${{ vars.DOCKER_PROD_REPO }}
      IMAGE_NAME:          spring-petclinic

    steps:
      - name: Checkout (to resolve full commit SHA)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute variables (source/target tags, commit)
        id: vars
        shell: bash
        run: |
          set -euo pipefail
          SRC="${{ github.event.inputs.sourceTag }}"
          TGT="${{ github.event.inputs.targetTag }}"
          if [ -z "$TGT" ]; then TGT="$SRC"; fi

          SHORT="${SRC#git-}"
          # Resolve to full commit SHA in this repo (fallback to SHORT if not found)
          if git rev-parse --verify "${SHORT}^{commit}" >/dev/null 2>&1; then
            FULL=$(git rev-parse --verify "${SHORT}^{commit}")
          else
            FULL="$SHORT"
          fi

          echo "src=$SRC"           >> "$GITHUB_OUTPUT"
          echo "tgt=$TGT"           >> "$GITHUB_OUTPUT"
          echo "short_commit=$SHORT" >> "$GITHUB_OUTPUT"
          echo "full_commit=$FULL"   >> "$GITHUB_OUTPUT"

          echo "Source tag : $SRC"
          echo "Target tag : $TGT"
          echo "Full commit: $FULL"

      - name: Promote via Artifactory Docker Promote API (copy layers; no rebuild)
        shell: bash
        run: |
          set -euo pipefail
          SRC="${{ steps.vars.outputs.src }}"
          TGT="${{ steps.vars.outputs.tgt }}"

          URL="${{ env.JF_URL }}/artifactory/api/docker/${{ env.DOCKER_DEV_REPO }}/v2/promote"
          JSON=$(printf '{"targetRepo":"%s","dockerRepository":"%s","tag":"%s","targetTag":"%s","copy":true}' \
                 "${{ env.DOCKER_PROD_REPO }}" "${{ env.IMAGE_NAME }}" "$SRC" "$TGT")
          echo "POST $URL"
          echo "$JSON"
          curl -sS -u "${{ secrets.JFROG_USER }}:${{ secrets.JFROG_TOKEN }}" \
               -H "Content-Type: application/json" \
               -d "$JSON" \
               "$URL" -o /tmp/promote.json
          echo "Response:"; cat /tmp/promote.json

      - name: Verify digest parity (dev vs prod)
        id: digests
        shell: bash
        run: |
          set -euo pipefail
          SRC="${{ steps.vars.outputs.src }}"
          TGT="${{ steps.vars.outputs.tgt }}"
          NAME="${{ env.IMAGE_NAME }}"

          dev_url="${{ env.JF_URL }}/artifactory/api/docker/${{ env.DOCKER_DEV_REPO }}/v2/${NAME}/manifests/${SRC}"
          prod_url="${{ env.JF_URL }}/artifactory/api/docker/${{ env.DOCKER_PROD_REPO }}/v2/${NAME}/manifests/${TGT}"

          dev_hdrs=$(curl -sSI -u "${{ secrets.JFROG_USER }}:${{ secrets.JFROG_TOKEN }}" "$dev_url")
          prod_hdrs=$(curl -sSI -u "${{ secrets.JFROG_USER }}:${{ secrets.JFROG_TOKEN }}" "$prod_url")

          dev_digest=$(echo "$dev_hdrs"  | tr -d '\r' | awk -F': ' 'tolower($1)=="docker-content-digest"{print $2}' | tail -n1)
          prod_digest=$(echo "$prod_hdrs" | tr -d '\r' | awk -F': ' 'tolower($1)=="docker-content-digest"{print $2}' | tail -n1)

          echo "Dev  digest: $dev_digest"
          echo "Prod digest: $prod_digest"

          [ -n "$dev_digest" ]  || { echo "::error::Missing dev digest";  exit 1; }
          [ -n "$prod_digest" ] || { echo "::error::Missing prod digest"; exit 1; }
          [ "$dev_digest" = "$prod_digest" ] || { echo "::error::Digest mismatch after promotion"; exit 1; }

          echo "dev_digest=$dev_digest"   >> "$GITHUB_OUTPUT"
          echo "prod_digest=$prod_digest" >> "$GITHUB_OUTPUT"
          echo "Promotion OK — digests match ✅"

      - name: Create release mapping JSON
        id: mapping
        shell: bash
        run: |
          set -euo pipefail
          SRC="${{ steps.vars.outputs.src }}"
          TGT="${{ steps.vars.outputs.tgt }}"
          FULL="${{ steps.vars.outputs.full_commit }}"
          IMG="${{ env.IMAGE_NAME }}"
          DEV="${{ env.DOCKER_DEV_REPO }}"
          PRD="${{ env.DOCKER_PROD_REPO }}"
          DEV_DIG="${{ steps.digests.outputs.dev_digest }}"
          PRD_DIG="${{ steps.digests.outputs.prod_digest }}"

          printf '%s\n' "{
            \"version\": \"${TGT}\",
            \"commit\":  \"${FULL}\",
            \"image\":   \"${IMG}\",
            \"dev\":  { \"repo\": \"${DEV}\",  \"tag\": \"${SRC}\", \"digest\": \"${DEV_DIG}\" },
            \"prod\": { \"repo\": \"${PRD}\", \"tag\": \"${TGT}\", \"digest\": \"${PRD_DIG}\" },
            \"ci_run\": \"${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}\",
            \"created\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
          }" > release-mapping.json
          echo "map_file=release-mapping.json" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release (v<version> → commit)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.vars.outputs.tgt }}
          target_commitish: ${{ steps.vars.outputs.full_commit }}
          name: Release ${{ steps.vars.outputs.tgt }}
          body: |
            Release **${{ steps.vars.outputs.tgt }}**
            - Commit: `${{ steps.vars.outputs.full_commit }}`
            - Dev tag: `${{ env.DOCKER_DEV_REPO }}:${{ steps.vars.outputs.src }}`
            - Prod tag: `${{ env.DOCKER_PROD_REPO }}:${{ steps.vars.outputs.tgt }}`
            - Digest: `${{ steps.digests.outputs.prod_digest }}`
          files: |
            ${{ steps.mapping.outputs.map_file }}

      - name: Upload mapping as workflow artifact (optional duplicate)
        uses: actions/upload-artifact@v4
        with:
          name: release-mapping-${{ steps.vars.outputs.tgt }}
          path: ${{ steps.mapping.outputs.map_file }}
