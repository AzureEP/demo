name: CI JAR + SBOM → (approval) → Docker image

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

env:
  # Repo Variables (Settings → Variables)
  JF_URL:                   ${{ vars.JF_URL }}                   # e.g. https://yourorg.jfrog.io
  JF_MVN_SNAPSHOTS_REPO:    ${{ vars.JF_MVN_SNAPSHOTS_REPO }}    # e.g. maven-snapshots-local
  JF_GENERIC_AUDIT_REPO:    ${{ vars.JF_GENERIC_AUDIT_REPO }}    # e.g. generic-audit-local
  JF_DOCKER_REGISTRY:       ${{ vars.JF_DOCKER_REGISTRY }}       # e.g. yourorg.jfrog.io
  DOCKER_DEV_REPO:          ${{ vars.DOCKER_DEV_REPO }}          # e.g. docker-dev-local
  IMAGE_NAME:               ${{ vars.IMAGE_NAME }}               # e.g. spring-petclinic

  # Maven flags: batch, no transfer progress, strict checksums, stacktraces
  MVN_FLAGS: "-B -ntp -C -e"

jobs:
  jar_and_sbom:
    name: Build, Test, SBOM (+ Xray on safe events) [+ Deploy on merge]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup JDK 17 + Maven server creds
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: maven
          server-id: artifactory
          server-username: JFROG_USER      # env var name only
          server-password: JFROG_TOKEN     # env var name only

      - name: Build & Test
        run: mvn $MVN_FLAGS clean verify

      - name: Generate CycloneDX SBOM (JSON)
        run: |
          mvn org.cyclonedx:cyclonedx-maven-plugin:2.7.9:makeBom \
            -Dcyclonedx.outputFormat=json \
            -Dcyclonedx.outputName=bom
          test -f target/bom.json && ls -lh target/bom.json

      - name: Stage app.jar for downstream job
        run: |
          mkdir -p out
          cp target/*.jar out/app.jar
          ls -la out

      - name: Upload JAR artifact (for Docker job)
        uses: actions/upload-artifact@v4
        with:
          name: app-jar-${{ github.sha }}
          path: out/app.jar
          if-no-files-found: error
          retention-days: 7

      - name: Upload SBOM as workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.sha }}
          path: target/cyclonedx.json
          if-no-files-found: error
          retention-days: 7

      # ---------- JFrog/Xray: only when secrets are safe ----------
      # Runs on push-to-main OR PRs from same repo (not forks)
      - name: Install JFrog CLI
        if: |
          github.event_name == 'push' ||
          (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
        uses: jfrog/setup-jfrog-cli@v4

      - name: Configure JFrog CLI
        if: |
          github.event_name == 'push' ||
          (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
        env:
          JFROG_USER:  ${{ secrets.JFROG_USER }}
          JFROG_TOKEN: ${{ secrets.JFROG_TOKEN }}
        run: |
          jf c add art --interactive=false \
            --url "${JF_URL}" \
            --user "${JFROG_USER}" \
            --password "${JFROG_TOKEN}" \
            --overwrite=true
          jf c use art
          mkdir -p target/xray

      - name: Xray dependency audit (Maven) — non-blocking
        if: |
          github.event_name == 'push' ||
          (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
        continue-on-error: true
        run: jf audit --mvn --format=json > target/xray/xray-deps.json || true

      - name: Xray binary scan (built JAR) — non-blocking
        if: |
          github.event_name == 'push' ||
          (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
        continue-on-error: true
        run: jf scan "target/*.jar" --format=json > target/xray/xray-jar.json || true

      - name: Upload Xray JSONs (artifact)
        if: |
          (github.event_name == 'push' ||
          (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)) && always()
        uses: actions/upload-artifact@v4
        with:
          name: xray-json-${{ github.sha }}
          path: |
            target/xray/xray-deps.json
            target/xray/xray-jar.json
          if-no-files-found: ignore
          retention-days: 7

      # ---------- Deploy JAR + Upload SBOM to JFrog: only on merge (push->main) ----------
      - name: Deploy to Artifactory (snapshot repo)
        if: github.event_name == 'push'
        env:
          JFROG_USER:  ${{ secrets.JFROG_USER }}
          JFROG_TOKEN: ${{ secrets.JFROG_TOKEN }}
        run: |
          DEPLOY_URL="${JF_URL%/}/artifactory/${JF_MVN_SNAPSHOTS_REPO}"
          echo "Deploying to: ${DEPLOY_URL}"
          mvn $MVN_FLAGS -DaltDeploymentRepository=artifactory::default::"${DEPLOY_URL}" deploy

      - name: Upload SBOM to generic audit repo
        if: github.event_name == 'push'
        run: |
          jf rt u "target/cyclonedx.json" "${JF_GENERIC_AUDIT_REPO}/sboms/petclinic/${{ github.sha }}/" --flat=true

  docker_image:
    name: Build & Push Docker image (requires approval)
    needs: jar_and_sbom
    if: github.event_name != 'pull_request'   # only on push or manual
    runs-on: ubuntu-latest
    environment: docker-build   # <-- configure this environment with Required reviewers for approval
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download JAR from previous job
        uses: actions/download-artifact@v4
        with:
          name: app-jar-${{ github.sha }}
          path: .
      - name: Verify JAR present
        run: ls -la app.jar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to JFrog Docker registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.JF_DOCKER_REGISTRY }}
          username: ${{ secrets.JFROG_USER }}
          password: ${{ secrets.JFROG_TOKEN }}

      - name: Compute tags
        id: tags
        shell: bash
        run: |
          SHORT="${GITHUB_SHA::7}"
          BRANCH="${GITHUB_REF_NAME:-$(git rev-parse --abbrev-ref HEAD)}"
          SAFE_BRANCH=$(echo "$BRANCH" | tr '[:upper:]' '[:lower:]' | sed -E 's#[^a-z0-9._-]#-#g')
          echo "short=$SHORT" >> "$GITHUB_OUTPUT"
          echo "branch=$SAFE_BRANCH" >> "$GITHUB_OUTPUT"

      - name: Build & push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.from-jar
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.JF_DOCKER_REGISTRY }}/${{ env.DOCKER_DEV_REPO }}/${{ env.IMAGE_NAME }}:git-${{ steps.tags.outputs.short }}
            ${{ env.JF_DOCKER_REGISTRY }}/${{ env.DOCKER_DEV_REPO }}/${{ env.IMAGE_NAME }}:${{ steps.tags.outputs.branch }}-latest
          build-args: |
            BUILD_TS=${{ github.run_started_at }}
            VCS_REF=${{ github.sha }}
            REPO_URL=${{ github.server_url }}/${{ github.repository }}

      - name: Show digest & tags
        run: |
          echo "digest=${{ steps.build.outputs.digest }}"
          echo "tag1=${{ env.JF_DOCKER_REGISTRY }}/${{ env.DOCKER_DEV_REPO }}/${{ env.IMAGE_NAME }}:git-${{ steps.tags.outputs.short }}"
          echo "tag2=${{ env.JF_DOCKER_REGISTRY }}/${{ env.DOCKER_DEV_REPO }}/${{ env.IMAGE_NAME }}:${{ steps.tags.outputs.branch }}-latest"

      - name: Summary
        run: |
          echo "### Image pushed" >> "$GITHUB_STEP_SUMMARY"
          echo "- Digest: \`${{ steps.build.outputs.digest }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- Tags:" >> "$GITHUB_STEP_SUMMARY"
          echo "  - ${{ env.JF_DOCKER_REGISTRY }}/${{ env.DOCKER_DEV_REPO }}/${{ env.IMAGE_NAME }}:git-${{ steps.tags.outputs.short }}" >> "$GITHUB_STEP_SUMMARY"
          echo "  - ${{ env.JF_DOCKER_REGISTRY }}/${{ env.DOCKER_DEV_REPO }}/${{ env.IMAGE_NAME }}:${{ steps.tags.outputs.branch }}-latest" >> "$GITHUB_STEP_SUMMARY"
