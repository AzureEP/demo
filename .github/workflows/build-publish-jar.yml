name: 01-Build-and-Publish-JAR

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-publish-jar:
    runs-on: ubuntu-latest

    env:
      # Repo variables (Settings → Variables)
      JF_URL: ${{ vars.JF_URL }}                      # e.g., https://chirag095.jfrog.io
      MAVEN_REPO: ${{ vars.JF_MVN_SNAPSHOTS_REPO }}   # e.g., demo-libs-snapshot (LOCAL snapshot repo)
      MVN_FLAGS: -B -ntp -e -V

      # Secrets mapped to env
      JF_USER:  ${{ secrets.JFROG_USER }}
      JF_TOKEN: ${{ secrets.JFROG_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Temurin JDK 17 + Maven server creds
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
          server-id: artifactory                       # creates ~/.m2/settings.xml
          server-username: ${{ env.JF_USER }}         # do not reference secrets directly
          server-password: ${{ env.JF_TOKEN }}

      - name: Debug settings.xml
        shell: bash
        run: |
          echo "Expect server id 'artifactory' in ~/.m2/settings.xml"
          ls -la ~/.m2 || true
          cat ~/.m2/settings.xml || true

      - name: Derive version (g<sha>-SNAPSHOT)
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          SHA_SHORT="${GITHUB_SHA::7}"
          CURR_VER=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.version)
          BASE_VER="${CURR_VER%-SNAPSHOT}"
          NEW_VER="${BASE_VER}-g${SHA_SHORT}-SNAPSHOT"
          echo "sha_short=${SHA_SHORT}" >> "$GITHUB_OUTPUT"
          echo "new_version=${NEW_VER}" >> "$GITHUB_OUTPUT"
          echo "Using project.version=${NEW_VER}"

      - name: Set project version
        shell: bash
        run: mvn $MVN_FLAGS -DgenerateBackupPoms=false versions:set -DnewVersion="${{ steps.meta.outputs.new_version }}"

      # ---------- Non-blocking quality checks ----------
      - name: Checkstyle (non-blocking)
        shell: bash
        run: mvn $MVN_FLAGS checkstyle:check || true

      - name: SpotBugs (non-blocking)
        shell: bash
        run: mvn $MVN_FLAGS com.github.spotbugs:spotbugs-maven-plugin:spotbugs || true

      # ---------- Test & Package (skip bound style plugins that fail build) ----------
      - name: Test
        shell: bash
        run: mvn $MVN_FLAGS -DskipITs -Dcheckstyle.skip=true -Dspotbugs.skip=true verify

      - name: Package
        shell: bash
        run: mvn $MVN_FLAGS -DskipITs -Dcheckstyle.skip=true -Dspotbugs.skip=true package

      # ---------- Xray quality gate (non-blocking, BEFORE upload) ----------
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ env.JF_URL }}
          JF_ACCESS_TOKEN: ${{ env.JF_TOKEN }}

      - name: Xray dependency audit (non-blocking; save JSON under target/)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p target/xray
          jf audit --mvn --format=json > target/xray/xray-audit.json || true
          echo "Saved target/xray/xray-audit.json (pre-deploy)."

      # ---------- Resolve GAV & files ----------
      - name: Resolve GAV and built files
        id: gav
        shell: bash
        run: |
          set -euo pipefail
          G=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.groupId)
          A=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.artifactId)
          V=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.version)
          JAR=$(ls -1 target/*.jar | head -n1)
          POM=$(ls -1 target/*.pom | head -n1 || echo "pom.xml")
          echo "groupId=${G}"        >> "$GITHUB_OUTPUT"
          echo "artifactId=${A}"     >> "$GITHUB_OUTPUT"
          echo "version=${V}"        >> "$GITHUB_OUTPUT"
          echo "jar=${JAR}"          >> "$GITHUB_OUTPUT"
          echo "pom=${POM}"          >> "$GITHUB_OUTPUT"
          echo "GAV: ${G}:${A}:${V}"
          echo "JAR: ${JAR}"
          echo "POM: ${POM}"

      # ---------- Prove auth to the exact metadata path (diagnostic) ----------
      - name: Check metadata URL auth (diagnostic)
        shell: bash
        run: |
          set -euo pipefail
          G="${{ steps.gav.outputs.groupId }}"
          A="${{ steps.gav.outputs.artifactId }}"
          V="${{ steps.gav.outputs.version }}"
          META="${JF_URL%/}/artifactory/${MAVEN_REPO}/$(echo "$G" | tr . /)/${A}/${V}/maven-metadata.xml"
          echo "GET $META"
          code=$(curl -sS -u "${JF_USER}:${JF_TOKEN}" -o /tmp/meta.xml -w "%{http_code}" "$META" || true)
          echo "HTTP $code"
          if [ "$code" = "401" ]; then
            echo "::warning::401 on metadata GET — switching to deploy:deploy-file to bypass remote metadata fetch."
          fi

      # ---------- Upload using deploy:deploy-file (explicit URL + repositoryId) ----------
      - name: Deploy JAR & POM to Artifactory (deploy-file)
        shell: bash
        env:
          DEPLOY_URL: ${{ env.JF_URL }}/artifactory/${{ env.MAVEN_REPO }}
        run: |
          set -euo pipefail
          echo "Deploy URL: ${DEPLOY_URL}"
          mvn $MVN_FLAGS deploy:deploy-file \
            -Dfile="${{ steps.gav.outputs.jar }}" \
            -DpomFile="${{ steps.gav.outputs.pom }}" \
            -Durl="${DEPLOY_URL}" \
            -DrepositoryId=artifactory \
            -DgeneratePom=false

      # ---------- Upload artifacts & reports ----------
      - name: Upload JAR, POM, and quality reports
        uses: actions/upload-artifact@v4
        with:
          name: jar-and-quality-${{ github.sha }}
          path: |
            target/*.jar
            target/*.pom
            target/xray/xray-audit.json
          if-no-files-found: error

      - name: Summary
        shell: bash
        run: |
          {
            echo "### JAR uploaded to Artifactory (deploy-file)"
            echo "- GAV: \`${{ steps.gav.outputs.groupId }}:${{ steps.gav.outputs.artifactId }}:${{ steps.gav.outputs.version }}\`"
            echo "- Repo: \`${{ env.MAVEN_REPO }}\` @ \`${{ env.JF_URL }}\`"
            echo "- Upload method: \`deploy:deploy-file\` (avoids remote metadata fetch)"
            echo "- Quality gates (non-blocking) ran **before** upload"
            echo "- Workflow artifact: \`jar-and-quality-${{ github.sha }}\`"
          } >> "$GITHUB_STEP_SUMMARY"
