# .github/workflows/publish.yml
# Build & Publish with non-blocking Xray + checksum parity
# - Reproducible build; version includes commit (…-g<sha>-SNAPSHOT)
# - Xray audits/scans (non-blocking) -> JSON saved under target/xray/
# - Deploy to Artifactory snapshot repo
# - Resolve remote snapshot filename; create local copy named exactly like remote + .sha256
# - Verify remote vs local checksum via Artifactory HEAD header
# - Upload local copy + checksum + Xray JSONs as workflow artifacts

name: Build and Publish to JFrog Artifactory (with non-blocking Xray)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    env:
      # REQUIRED repo settings:
      #   Secrets:  JFROG_USER, JFROG_TOKEN
      #   Variables: JF_URL (e.g., https://yourorg.jfrog.io)
      #              JF_MVN_SNAPSHOTS_REPO (e.g., maven-snapshots-local)
      JFROG_USER:  ${{ secrets.JFROG_USER }}
      JFROG_TOKEN: ${{ secrets.JFROG_TOKEN }}
      JF_URL:      ${{ vars.JF_URL }}
      SNAP_REPO:   ${{ vars.JF_MVN_SNAPSHOTS_REPO }}

      ARTIFACT_DIR: dist
      MVN_FLAGS: "-B -ntp -C -e"   # batch, no transfer progress, strict checksums, stacktraces

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Clean any leftover scan files so Checkstyle NoHttp won't see them
      - name: Pre-clean scan outputs
        shell: bash
        run: |
          set -euo pipefail
          rm -f xray-*.json || true
          rm -rf target/xray || true

      # Writes ~/.m2/settings.xml with <server id="artifactory"> using ENV VAR NAMES below
      - name: Setup JDK 17 + Maven server creds
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: maven
          server-id: artifactory
          server-username: JFROG_USER      # NAME of env var (not the secret value)
          server-password: JFROG_TOKEN     # NAME of env var (not the secret value)

      - name: Toolchain versions
        shell: bash
        run: |
          set -eux
          java -version
          mvn -version

      - name: Build timestamp & short commit (from last commit)
        id: ts
        shell: bash
        run: |
          set -euo pipefail
          COMMIT_TS=$(git log -1 --format=%ct)
          echo "iso=$(date -u -d @${COMMIT_TS} +%Y-%m-%dT%H:%M:%SZ)" >> "$GITHUB_OUTPUT"
          echo "compact=$(date -u -d @${COMMIT_TS} +%Y%m%dT%H%M%SZ)" >> "$GITHUB_OUTPUT"
          echo "short_sha=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Set version to include commit id (…-g<sha>-SNAPSHOT)
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          CURR=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.version)
          BASE="${CURR%-SNAPSHOT}"                          # drop -SNAPSHOT if present
          NEW="${BASE}-g${{ steps.ts.outputs.short_sha }}-SNAPSHOT"
          echo "Setting version: ${NEW}"
          mvn -q -DgenerateBackupPoms=false versions:set -DnewVersion="${NEW}"
          echo "new_version=${NEW}" >> "$GITHUB_OUTPUT"

      - name: Build & test (reproducible)
        shell: bash
        run: |
          set -euo pipefail
          mvn $MVN_FLAGS -Dproject.build.outputTimestamp="${{ steps.ts.outputs.iso }}" clean verify

      # ---------- XRAY (NON-BLOCKING) ----------
      - name: Install JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4

      - name: Configure JFrog CLI server (non-interactive)
        shell: bash
        run: |
          set -euo pipefail
          jf c add art \
            --interactive=false \
            --url "${JF_URL}" \
            --user "${JFROG_USER}" \
            --password "${JFROG_TOKEN}" \
            --overwrite=true
          jf c use art
          mkdir -p target/xray

      - name: Xray dependency audit (Maven) — non-blocking
        continue-on-error: true
        shell: bash
        run: |
          set -euo pipefail
          jf audit --mvn --format=json > target/xray/xray-deps.json || true
          echo "Dependency audit completed (non-blocking)."

      - name: Xray binary scan (built JAR) — non-blocking
        continue-on-error: true
        shell: bash
        run: |
          set -euo pipefail
          jf scan "target/*.jar" --format=json > target/xray/xray-jar.json || true
          echo "Binary scan completed (non-blocking)."

      - name: Upload Xray JSON reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xray-json-${{ github.sha }}
          path: |
            target/xray/xray-deps.json
            target/xray/xray-jar.json
      # -----------------------------------------

      - name: Deploy to Artifactory (snapshot repo)
        shell: bash
        run: |
          set -euo pipefail
          DEPLOY_URL="${JF_URL%/}/artifactory/${SNAP_REPO}"
          echo "Deploying to: ${DEPLOY_URL}"
          mvn $MVN_FLAGS \
            -Dproject.build.outputTimestamp="${{ steps.ts.outputs.iso }}" \
            -DaltDeploymentRepository=artifactory::default::"${DEPLOY_URL}" \
            deploy

      - name: Resolve remote snapshot filename from maven-metadata.xml
        id: remotename
        shell: bash
        env:
          NEW_VERSION: ${{ steps.ver.outputs.new_version }}
        run: |
          set -euo pipefail
          GID=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.groupId)
          AID=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.artifactId)
          GROUP_PATH=$(echo "$GID" | tr '.' '/')
          BASE="${NEW_VERSION%-SNAPSHOT}"
          META_URL="${JF_URL%/}/artifactory/${SNAP_REPO}/${GROUP_PATH}/${AID}/${NEW_VERSION}/maven-metadata.xml"
          echo "Fetching metadata: ${META_URL}"
          # small retry in case metadata isn't ready immediately
          for i in 1 2 3 4 5; do
            META_XML=$(curl -sS -u "${JFROG_USER}:${JFROG_TOKEN}" -H "Accept: application/xml" "$META_URL" || true)
            ONE=$(echo "$META_XML" | tr -d '\n')
            UNIQ=$(echo "$ONE" | sed -n 's:.*<snapshotVersion><extension>jar</extension><value>\([^<]*\)</value>.*:\1:p')
            if [ -n "$UNIQ" ]; then
              REMOTE_FILE="${AID}-${UNIQ}.jar"; break
            fi
            TS=$(echo "$META_XML" | sed -n 's:.*<timestamp>\(.*\)</timestamp>.*:\1:p' | head -n1)
            BN=$(echo "$META_XML" | sed -n 's:.*<buildNumber>\(.*\)</buildNumber>.*:\1:p' | head -n1)
            if [ -n "$TS" ] && [ -n "$BN" ]; then
              REMOTE_FILE="${AID}-${BASE}-${TS}-${BN}.jar"; break
            fi
            sleep 2
          done
          [ -n "${REMOTE_FILE:-}" ] || { echo "::error::Unable to determine snapshot filename."; exit 1; }
          echo "remote_name=${REMOTE_FILE}" >> "$GITHUB_OUTPUT"
          echo "group_path=${GROUP_PATH}"   >> "$GITHUB_OUTPUT"
          echo "artifact_id=${AID}"         >> "$GITHUB_OUTPUT"

      - name: Make local copy + sha256 (named exactly like remote)
        id: stage
        shell: bash
        env:
          REMOTE_NAME: ${{ steps.remotename.outputs.remote_name }}
        run: |
          set -euo pipefail
          mkdir -p "${ARTIFACT_DIR}"
          SRC_JAR=$(ls target/*.jar | head -n1)
          cp "${SRC_JAR}" "${ARTIFACT_DIR}/${REMOTE_NAME}"
          (cd "${ARTIFACT_DIR}" && sha256sum "${REMOTE_NAME}" > "${REMOTE_NAME}.sha256")
          echo "out_name=${REMOTE_NAME}" >> "$GITHUB_OUTPUT"
          echo "local_sha256=$(cut -d' ' -f1 ${ARTIFACT_DIR}/${REMOTE_NAME}.sha256)" >> "$GITHUB_OUTPUT"

      - name: Validate checksum with Artifactory (HEAD header)
        shell: bash
        env:
          GROUP_PATH:  ${{ steps.remotename.outputs.group_path }}
          ARTIFACT_ID: ${{ steps.remotename.outputs.artifact_id }}
          VERSION:     ${{ steps.ver.outputs.new_version }}
          REMOTE_NAME: ${{ steps.remotename.outputs.remote_name }}
          LOCAL_NAME:  ${{ steps.stage.outputs.out_name }}
        run: |
          set -euo pipefail
          FILE_URL="${JF_URL%/}/artifactory/${SNAP_REPO}/${GROUP_PATH}/${ARTIFACT_ID}/${VERSION}/${REMOTE_NAME}"
          echo "HEAD ${FILE_URL}"
          REMOTE_SHA256=""
          for i in 1 2 3 4 5; do
            HDRS=$(curl -sS -I -u "${JFROG_USER}:${JFROG_TOKEN}" "${FILE_URL}" || true)
            CODE=$(echo "$HDRS" | tr -d '\r' | awk 'NR==1{print $2}')
            echo "HTTP $CODE (attempt $i)"
            REMOTE_SHA256=$(echo "$HDRS" | tr -d '\r' | awk -F': ' 'tolower($1)=="x-checksum-sha256"{print $2}' | tail -n1)
            [ "$CODE" = "200" ] && [ -n "$REMOTE_SHA256" ] && break
            sleep 2
          done
          [ -n "$REMOTE_SHA256" ] || { echo "::error::Could not obtain X-Checksum-Sha256."; exit 1; }
          LOCAL_SHA256=$(cut -d' ' -f1 "${ARTIFACT_DIR}/${LOCAL_NAME}.sha256")
          echo "Remote sha256: $REMOTE_SHA256"
          echo "Local  sha256: $LOCAL_SHA256"
          [ "$REMOTE_SHA256" = "$LOCAL_SHA256" ] || { echo "::error::Checksum mismatch."; exit 1; }
          echo "Checksum match ✅"

      - name: Upload artifact (local copy + sha256 + Xray JSON)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.stage.outputs.out_name }}
          path: |
            ${{ env.ARTIFACT_DIR }}/*
            target/xray/xray-deps.json
            target/xray/xray-jar.json