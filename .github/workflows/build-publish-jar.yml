# .github/workflows/01-build-publish-jar.yml
# Step 1: Build, test, run non-blocking quality gates (incl. Xray), then publish JAR to Artifactory.
# Fixes 401 by injecting REAL creds into settings.xml (no ${env.…}) and adds diagnostics + fallback.

name: 01-Build-and-Publish-JAR

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-publish-jar:
    runs-on: ubuntu-latest

    env:
      # Repo variables (Settings → Variables)
      JF_URL: ${{ vars.JF_URL }}                      # e.g., https://chirag095.jfrog.io
      MAVEN_REPO: ${{ vars.JF_MVN_SNAPSHOTS_REPO }}   # e.g., demo-libs-snapshot (LOCAL snapshots)
      MVN_FLAGS: -B -ntp -e -V

      # Secrets mapped to env for CLI/curl use
      JF_USER:  ${{ secrets.JFROG_USER }}
      JF_TOKEN: ${{ secrets.JFROG_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set up Temurin JDK 17 + Maven server creds
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
          # IMPORTANT: pass the ACTUAL secret values here (not env var names).
          server-id: artifactory
          server-username: ${{ secrets.JFROG_USER }}
          server-password: ${{ secrets.JFROG_TOKEN }}

      - name: Debug settings.xml
        shell: bash
        run: |
          echo "Expect <id>artifactory</id> with REAL values in ~/.m2/settings.xml"
          ls -la ~/.m2 || true
          cat ~/.m2/settings.xml || true

      - name: Derive version (g<sha>-SNAPSHOT)
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          SHA_SHORT="${GITHUB_SHA::7}"
          CURR=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.version)
          BASE="${CURR%-SNAPSHOT}"
          NEW="${BASE}-g${SHA_SHORT}-SNAPSHOT"
          echo "new_version=${NEW}" >> "$GITHUB_OUTPUT"
          echo "Using project.version=${NEW}"

      - name: Set project version
        shell: bash
        run: mvn $MVN_FLAGS -DgenerateBackupPoms=false versions:set -DnewVersion="${{ steps.meta.outputs.new_version }}"

      # ---- Non-blocking quality checks ----
      - name: Checkstyle (non-blocking)
        shell: bash
        run: mvn $MVN_FLAGS checkstyle:check || true

      - name: SpotBugs (non-blocking)
        shell: bash
        run: mvn $MVN_FLAGS com.github.spotbugs:spotbugs-maven-plugin:spotbugs || true

      # ---- Test & Package (skip bound style plugins that may fail) ----
      - name: Test
        shell: bash
        run: mvn $MVN_FLAGS -DskipITs -Dcheckstyle.skip=true -Dspotbugs.skip=true verify

      - name: Package
        shell: bash
        run: mvn $MVN_FLAGS -DskipITs -Dcheckstyle.skip=true -Dspotbugs.skip=true package

      # ---- Xray quality gate (non-blocking, BEFORE upload) ----
      - name: Setup JFrog CLI for Xray
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ env.JF_URL }}
          JF_ACCESS_TOKEN: ${{ env.JF_TOKEN }}

      - name: Xray dependency audit (non-blocking; save JSON under target/)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p target/xray
          jf audit --mvn --format=json > target/xray/xray-audit.json || true
          echo "Saved target/xray/xray-audit.json (pre-deploy)."

      # ---- Resolve GAV & files ----
      - name: Resolve GAV and built files
        id: gav
        shell: bash
        run: |
          set -euo pipefail
          G=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.groupId)
          A=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.artifactId)
          V=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.version)
          JAR=$(ls -1 target/*.jar | head -n1)
          POM=$(ls -1 target/*.pom | head -n1 || echo "pom.xml")
          GP=$(echo "$G" | tr . /)
          echo "groupId=${G}"  >> "$GITHUB_OUTPUT"
          echo "artifactId=${A}" >> "$GITHUB_OUTPUT"
          echo "version=${V}"  >> "$GITHUB_OUTPUT"
          echo "groupPath=${GP}" >> "$GITHUB_OUTPUT"
          echo "jar=${JAR}"    >> "$GITHUB_OUTPUT"
          echo "pom=${POM}"    >> "$GITHUB_OUTPUT"
          echo "GAV: ${G}:${A}:${V}"
          echo "JAR: ${JAR}"
          echo "POM: ${POM}"

      # ---- Diagnose the exact metadata URL with auth ----
      - name: Diagnose metadata URL auth
        shell: bash
        run: |
          set -euo pipefail
          META="${JF_URL%/}/artifactory/${MAVEN_REPO}/${{ steps.gav.outputs.groupPath }}/${{ steps.gav.outputs.artifactId }}/${{ steps.gav.outputs.version }}/maven-metadata.xml"
          echo "curl -i $META"
          curl -i -u "${JF_USER}:${JF_TOKEN}" "$META" || true
          echo ""
          echo "If this returns 401 without WWW-Authenticate, Maven may not retry with auth. We'll still try deploy, then fallback."

      # ---- Try standard mvn deploy (modern alt repo syntax) ----
      - name: Deploy via mvn deploy (primary)
        id: deploy_try
        shell: bash
        continue-on-error: true
        env:
          ALT_REPO: artifactory::${{ env.JF_URL }}/artifactory/${{ env.MAVEN_REPO }}
        run: |
          set -euo pipefail
          echo "ALT_REPO='${ALT_REPO}'"
          mvn $MVN_FLAGS \
            -DskipITs -DskipTests=true \
            -DaltDeploymentRepository="${ALT_REPO}" \
            deploy

      # ---- Fallback: deploy:deploy-file (explicit upload) ----
      - name: Deploy via deploy-file (fallback if deploy failed)
        if: ${{ steps.deploy_try.outcome == 'failure' }}
        shell: bash
        env:
          DEPLOY_URL: ${{ env.JF_URL }}/artifactory/${{ env.MAVEN_REPO }}
        run: |
          set -euo pipefail
          echo "::warning::mvn deploy failed. Falling back to deploy:deploy-file."
          echo "Deploy URL: ${DEPLOY_URL}"
          mvn $MVN_FLAGS deploy:deploy-file \
            -Dfile="${{ steps.gav.outputs.jar }}" \
            -DpomFile="${{ steps.gav.outputs.pom }}" \
            -Durl="${DEPLOY_URL}" \
            -DrepositoryId=artifactory \
            -DgeneratePom=false

      # ---- Upload artifacts & reports ----
      - name: Upload JAR, POM, and quality reports
        uses: actions/upload-artifact@v4
        with:
          name: jar-and-quality-${{ github.sha }}
          path: |
            target/*.jar
            target/*.pom
            target/xray/xray-audit.json
          if-no-files-found: error

      - name: Summary
        shell: bash
        run: |
          {
            echo "### JAR published to Artifactory"
            echo "- Version: \`${{ steps.meta.outputs.new_version }}\`"
            echo "- Repo: \`${{ env.MAVEN_REPO }}\` at \`${{ env.JF_URL }}\`"
            echo "- Primary deploy: \`${{ steps.deploy_try.outcome }}\`"
            echo "- Xray: non-blocking, pre-deploy"
          } >> "$GITHUB_STEP_SUMMARY"
