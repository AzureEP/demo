# .github/workflows/01-build-publish-jar.yml
# Step 1: Compile & test, run non-blocking quality gates (incl. Xray),
# then publish the JAR to JFrog Artifactory. No manual ~/.m2/settings.xml.

name: 01-Build-and-Publish-JAR

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-publish-jar:
    runs-on: ubuntu-latest

    env:
      # Repo variables (Settings → Variables)
      JF_URL: ${{ vars.JF_URL }}                     # e.g., https://chirag095.jfrog.io
      MAVEN_REPO: ${{ vars.JF_MVN_SNAPSHOTS_REPO }}  # e.g., demo-libs-snapshot (must allow -SNAPSHOT)
      MVN_FLAGS: -B -ntp -e -V

      # Secrets mapped to env (don’t reference secrets directly later)
      JF_USER:  ${{ secrets.JFROG_USER }}
      JF_TOKEN: ${{ secrets.JFROG_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Temurin JDK 17 + Maven server creds
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
          # Writes ~/.m2/settings.xml with <server id="artifactory">
          server-id: artifactory
          server-username: ${{ env.JF_USER }}
          server-password: ${{ env.JF_TOKEN }}

      - name: Debug settings.xml
        shell: bash
        run: |
          echo "Expect server id 'artifactory' in ~/.m2/settings.xml"
          ls -la ~/.m2 || true
          cat ~/.m2/settings.xml || true

      - name: Derive build metadata (version with git sha)
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          SHA_SHORT="${GITHUB_SHA::7}"
          CURR_VER=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.version)
          BASE_VER="${CURR_VER%-SNAPSHOT}"
          NEW_VER="${BASE_VER}-g${SHA_SHORT}-SNAPSHOT"
          echo "sha_short=${SHA_SHORT}"       >> "$GITHUB_OUTPUT"
          echo "new_version=${NEW_VER}"       >> "$GITHUB_OUTPUT"
          echo "Using project.version=${NEW_VER}"

      # ---------- Non-blocking quality checks (manual run) ----------
      - name: Checkstyle (non-blocking)
        shell: bash
        run: mvn $MVN_FLAGS checkstyle:check || true

      - name: SpotBugs (non-blocking)
        shell: bash
        run: mvn $MVN_FLAGS com.github.spotbugs:spotbugs-maven-plugin:spotbugs || true

      # ---------- Tests (skip bound checkstyle/spotbugs to avoid fail) ----------
      - name: Test
        shell: bash
        run: mvn $MVN_FLAGS -DskipITs -Dcheckstyle.skip=true -Dspotbugs.skip=true verify

      # ---------- Package the JAR (skip bound checkstyle/spotbugs) ----------
      - name: Package
        shell: bash
        run: mvn $MVN_FLAGS -DskipITs -Dcheckstyle.skip=true -Dspotbugs.skip=true package

      # ---------- Xray quality gate (non-blocking, BEFORE deploy) ----------
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          # The action reads credentials from ENV
          JF_URL: ${{ env.JF_URL }}
          JF_ACCESS_TOKEN: ${{ env.JF_TOKEN }}

      - name: Xray dependency audit (non-blocking; save JSON report under target/)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p target/xray
          jf audit --mvn --format=json > target/xray/xray-audit.json || true
          echo "Saved target/xray/xray-audit.json (pre-deploy)."

      # ---------- Sanity check Artifactory repo access ----------
      - name: Sanity check repo access
        shell: bash
        run: |
          set -euo pipefail
          API="${JF_URL%/}/artifactory/api/storage/${MAVEN_REPO}"
          echo "GET $API"
          code=$(curl -sS -u "${JF_USER}:${JF_TOKEN}" -o /tmp/repo.json -w "%{http_code}" "$API" || true)
          echo "HTTP $code"
          cat /tmp/repo.json || true
          if [ "$code" != "200" ]; then
            echo "::error::Artifactory repo '${MAVEN_REPO}' not accessible (HTTP $code). Check repo key, perms, or token."
            exit 1
          fi

      # ---------- Deploy to Artifactory (uses auto settings.xml) ----------
      - name: Deploy to Artifactory (snapshots)
        env:
          ALT_REPO: artifactory::${{ env.JF_URL }}/artifactory/${{ env.MAVEN_REPO }}
        shell: bash
        run: |
          set -euo pipefail
          echo "Deploying with ALT_REPO='${ALT_REPO}'"
          mvn $MVN_FLAGS \
            -DskipITs -DskipTests=true \
            -DaltDeploymentRepository="${ALT_REPO}" \
            deploy

      # ---------- Upload artifacts & reports ----------
      - name: Upload JAR, POM, and quality reports
        uses: actions/upload-artifact@v4
        with:
          name: jar-and-quality-${{ github.sha }}
          path: |
            target/*.jar
            target/*.pom
            target/xray/xray-audit.json
          if-no-files-found: error

      - name: Summary
        shell: bash
        run: |
          {
            echo "### JAR published to Artifactory"
            echo "- Version: \`${{ steps.meta.outputs.new_version }}\`"
            echo "- Deploy URL: \`${{ env.JF_URL }}/artifactory/${{ env.MAVEN_REPO }}\`"
            echo "- Quality gates: Checkstyle/SpotBugs/Xray (non-blocking) ran **before** deploy"
            echo "- Workflow artifact: \`jar-and-quality-${{ github.sha }}\` (JAR/POM + xray-audit.json)"
          } >> "$GITHUB_STEP_SUMMARY"
