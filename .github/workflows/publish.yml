# Filename: .github/workflows/publish.yml
# FINAL — Build & Publish Maven JAR to JFrog Artifactory (no distributionManagement)

name: Build and Publish to JFrog Artifactory

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    env:
      ARTIFACT_DIR: dist
      # Batch (-B), no transfer progress (-ntp), strict checksums (-C),
      # show plugin/tool versions (-V), show stacktraces on error (-e)
      MVN_FLAGS: "-B -ntp -C -V -e"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17 and write Maven server credentials
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: maven
          # This creates ~/.m2/settings.xml with a <server><id>artifactory</id>...</server>
          server-id: artifactory
          server-username: ${{ secrets.JFROG_USER }}
          server-password: ${{ secrets.JFROG_TOKEN }}

      - name: DEBUG — Java & Maven versions
        run: |
          set -euxo pipefail
          java -version
          mvn -version

      - name: Determine reproducible build timestamp
        id: ts
        run: |
          set -euo pipefail
          TS=$(git log -1 --format=%ct)
          echo "build_ts=$(date -u -d @${TS} +%Y-%m-%dT%H:%M:%SZ)" >> "$GITHUB_OUTPUT"

      - name: DEBUG — Inspect ~/.m2/settings.xml (sanitized)
        run: |
          set -euo pipefail
          echo "--- ~/.m2 directory:"
          ls -la ~/.m2/ || true
          echo "--- ~/.m2/settings.xml (password masked):"
          sed -E 's#(<password>).*?(</password>)#\1***MASKED***\2#g' ~/.m2/settings.xml || true
          echo "--- Verify server id present:"
          grep -n "<id>artifactory</id>" ~/.m2/settings.xml || (echo "Server id 'artifactory' not found!" && exit 1)

      - name: Resolve project version and choose target repo (snapshot vs release)
        id: repo
        env:
          JF_URL: ${{ vars.JF_URL }}                       # e.g., https://yourorg.jfrog.io
          SNAP_REPO: ${{ vars.JF_MVN_SNAPSHOTS_REPO }}     # e.g., maven-snapshots-local
          REL_REPO:  ${{ vars.JF_MVN_RELEASES_REPO }}      # e.g., maven-releases-local
        run: |
          set -euo pipefail
          APP_VER=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.version)
          echo "Detected project.version=${APP_VER}"
          case "${APP_VER}" in
            *-SNAPSHOT) REPO="${SNAP_REPO}" ;;
            *)          REPO="${REL_REPO}" ;;
          esac
          if [[ -z "${JF_URL}" || -z "${REPO}" ]]; then
            e
