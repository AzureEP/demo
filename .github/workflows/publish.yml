# .github/workflows/publish.yml
# SIMPLE VERSION — Build, test, and publish JAR to JFrog Artifactory (no <distributionManagement>)
# - Rewrites version to include commit id (so Artifactory snapshot name contains the commit)
# - Single Maven run (clean deploy) to avoid drift
# - Makes one local copy named with commit+timestamp + .sha256
# - Verifies remote (Artifactory) checksum == local checksum
# - Uploads the local copy + checksum as a GitHub artifact

name: Build and Publish to JFrog Artifactory

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    env:
      # REQUIRED: set these in your repo settings
      #   Secrets:  JFROG_USER, JFROG_TOKEN
      #   Variables: JF_URL (e.g., https://yourorg.jfrog.io)
      #              JF_MVN_SNAPSHOTS_REPO (e.g., maven-snapshots-local)
      JFROG_USER:  ${{ secrets.JFROG_USER }}
      JFROG_TOKEN: ${{ secrets.JFROG_TOKEN }}
      JF_URL:      ${{ vars.JF_URL }}
      SNAP_REPO:   ${{ vars.JF_MVN_SNAPSHOTS_REPO }}

      ARTIFACT_DIR: dist
      MVN_FLAGS: "-B -ntp -C -e"   # batch, no transfer progress, strict checksums, stacktraces

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Writes ~/.m2/settings.xml with <server id="artifactory"> using ENV VAR NAMES below
      - name: Setup JDK 17 + Maven server creds
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: maven
          server-id: artifactory
          server-username: JFROG_USER      # NAME of env var (not the secret value)
          server-password: JFROG_TOKEN     # NAME of env var (not the secret value)

      - name: Build timestamp & short commit
        id: ts
        shell: bash
        run: |
          set -euo pipefail
          COMMIT_TS=$(git log -1 --format=%ct)
          echo "iso=$(date -u -d @${COMMIT_TS} +%Y-%m-%dT%H:%M:%SZ)" >> "$GITHUB_OUTPUT"
          echo "compact=$(date -u -d @${COMMIT_TS} +%Y%m%dT%H%M%SZ)" >> "$GITHUB_OUTPUT"
          echo "short_sha=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Set version to include commit id (…-g<sha>-SNAPSHOT)
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          CURR=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.version)
          BASE="${CURR%-SNAPSHOT}"                          # drop -SNAPSHOT if present
          NEW="${BASE}-g${{ steps.ts.outputs.short_sha }}-SNAPSHOT"
          echo "Setting version: ${NEW}"
          mvn -q -DgenerateBackupPoms=false versions:set -DnewVersion="${NEW}"
          echo "new_version=${NEW}" >> "$GITHUB_OUTPUT"

      - name: Build, test, and deploy (single Maven run)
        shell: bash
        run: |
          set -euo pipefail
          DEPLOY_URL="${JF_URL%/}/artifactory/${SNAP_REPO}"
          echo "Deploying to: ${DEPLOY_URL}"
          mvn $MVN_FLAGS \
            -Dproject.build.outputTimestamp="${{ steps.ts.outputs.iso }}" \
            -DaltDeploymentRepository=artifactory::default::"${DEPLOY_URL}" \
            clean deploy

      - name: Make local copy + sha256 (commit+timestamp name)
        id: stage
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${ARTIFACT_DIR}"
          SRC_JAR=$(ls target/*.jar | head -n1)
          OUT="spring-petclinic-${{ steps.ver.outputs.new_version }}-${{ steps.ts.outputs.compact }}.jar"
          cp "${SRC_JAR}" "${ARTIFACT_DIR}/${OUT}"
          (cd "${ARTIFACT_DIR}" && sha256sum "${OUT}" > "${OUT}.sha256")
          echo "out_name=${OUT}" >> "$GITHUB_OUTPUT"
          echo "local_sha256=$(cut -d' ' -f1 ${ARTIFACT_DIR}/${OUT}.sha256)" >> "$GITHUB_OUTPUT"

      - name: Validate checksum with Artifactory (remote vs local)
        shell: bash
        env:
          NEW_VERSION: ${{ steps.ver.outputs.new_version }}
        run: |
          set -euo pipefail
          # Lookup the just-deployed jar via GAVC and compare sha256
          GID=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.groupId)
          AID=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.artifactId)
          Q="${JF_URL%/}/artifactory/api/search/gavc?g=${GID}&a=${AID}&v=${NEW_VERSION}&p=jar&r=${SNAP_REPO}"
          ITEM_URI=$(curl -s -u "${JFROG_USER}:${JFROG_TOKEN}" "$Q" | jq -r '.results[0].uri' || true)
          if [[ -z "${ITEM_URI}" || "${ITEM_URI}" == "null" ]]; then
            echo "::error::Could not locate the deployed artifact via GAVC search."; exit 1
          fi
          REMOTE_SHA=$(curl -s -u "${JFROG_USER}:${JFROG_TOKEN}" "${ITEM_URI}" | jq -r '.checksums.sha256')
          echo "Remote sha256: ${REMOTE_SHA}"
          echo "Local  sha256: ${{ steps.stage.outputs.local_sha256 }}"
          [[ -n "${REMOTE_SHA}" && "${REMOTE_SHA}" == "${{ steps.stage.outputs.local_sha256 }}" ]] || { echo "::error::Checksum mismatch"; exit 1; }
          echo "Checksum match ✅"

      - name: Upload artifact (local copy + sha256)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.stage.outputs.out_name }}
          path: ${{ env.ARTIFACT_DIR }}/*