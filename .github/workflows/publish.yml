# .github/workflows/publish.yml
# SIMPLE + ROBUST:
# - Builds & tests Spring PetClinic
# - Sets version to include commit id (…-g<sha>-SNAPSHOT) so Artifactory snapshot names include the commit
# - Single Maven run (clean deploy) → same bytes locally and in Artifactory
# - Creates a local copy named with commit+timestamp + .sha256
# - Validates checksum parity (remote vs local) with retries; fails on mismatch
# - Uploads the local copy + checksum as a GitHub artifact

name: Build and Publish to JFrog Artifactory

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    env:
      # REQUIRED repo settings:
      #   Secrets:  JFROG_USER, JFROG_TOKEN
      #   Variables: JF_URL (e.g., https://yourorg.jfrog.io)
      #              JF_MVN_SNAPSHOTS_REPO (e.g., maven-snapshots-local)
      JFROG_USER:  ${{ secrets.JFROG_USER }}
      JFROG_TOKEN: ${{ secrets.JFROG_TOKEN }}
      JF_URL:      ${{ vars.JF_URL }}
      SNAP_REPO:   ${{ vars.JF_MVN_SNAPSHOTS_REPO }}

      ARTIFACT_DIR: dist
      MVN_FLAGS: "-B -ntp -C -e"   # batch, no transfer progress, strict checksums, stacktraces

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Writes ~/.m2/settings.xml with <server id="artifactory"> using ENV VAR NAMES below
      - name: Setup JDK 17 + Maven server creds
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: maven
          server-id: artifactory
          server-username: JFROG_USER      # NAME of env var (not the secret value)
          server-password: JFROG_TOKEN     # NAME of env var (not the secret value)

      - name: Toolchain versions
        shell: bash
        run: |
          set -eux
          java -version
          mvn -version

      - name: Build timestamp & short commit (from last commit)
        id: ts
        shell: bash
        run: |
          set -euo pipefail
          COMMIT_TS=$(git log -1 --format=%ct)
          echo "iso=$(date -u -d @${COMMIT_TS} +%Y-%m-%dT%H:%M:%SZ)" >> "$GITHUB_OUTPUT"
          echo "compact=$(date -u -d @${COMMIT_TS} +%Y%m%dT%H%M%SZ)" >> "$GITHUB_OUTPUT"
          echo "short_sha=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Set version to include commit id (…-g<sha>-SNAPSHOT)
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          CURR=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.version)
          BASE="${CURR%-SNAPSHOT}"                          # drop -SNAPSHOT if present
          NEW="${BASE}-g${{ steps.ts.outputs.short_sha }}-SNAPSHOT"
          echo "Setting version: ${NEW}"
          mvn -q -DgenerateBackupPoms=false versions:set -DnewVersion="${NEW}"
          echo "new_version=${NEW}" >> "$GITHUB_OUTPUT"

      - name: Build, test, and deploy (single Maven run)
        shell: bash
        run: |
          set -euo pipefail
          DEPLOY_URL="${JF_URL%/}/artifactory/${SNAP_REPO}"
          echo "Deploying to: ${DEPLOY_URL}"
          mvn $MVN_FLAGS \
            -Dproject.build.outputTimestamp="${{ steps.ts.outputs.iso }}" \
            -DaltDeploymentRepository=artifactory::default::"${DEPLOY_URL}" \
            clean deploy

      - name: Make local copy + sha256 (commit+timestamp name)
        id: stage
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${ARTIFACT_DIR}"
          SRC_JAR=$(ls target/*.jar | head -n1)
          OUT="spring-petclinic-${{ steps.ver.outputs.new_version }}-${{ steps.ts.outputs.compact }}.jar"
          cp "${SRC_JAR}" "${ARTIFACT_DIR}/${OUT}"
          (cd "${ARTIFACT_DIR}" && sha256sum "${OUT}" > "${OUT}.sha256")
          echo "out_name=${OUT}" >> "$GITHUB_OUTPUT"
          echo "local_sha256=$(cut -d' ' -f1 ${ARTIFACT_DIR}/${OUT}.sha256)" >> "$GITHUB_OUTPUT"

      - name: Validate checksum with Artifactory (robust)
        shell: bash
        env:
          NEW_VERSION: ${{ steps.ver.outputs.new_version }}
          LOCAL_NAME:  ${{ steps.stage.outputs.out_name }}
        run: |
          set -euo pipefail

          # Ensure jq exists (usually preinstalled on ubuntu-latest)
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

          # 1) Derive G/A and paths
          GID=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.groupId)
          AID=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.artifactId)
          GROUP_PATH=$(echo "$GID" | tr '.' '/')
          BASE="${NEW_VERSION%-SNAPSHOT}"

          echo "groupId=${GID}"
          echo "artifactId=${AID}"
          echo "version=${NEW_VERSION}"
          echo "repo=${SNAP_REPO}"

          # Small retry helper (handles indexing lag)
          retry_curl_json() {
            local url="$1" tries=3
            for i in $(seq 1 $tries); do
              HTTP=$(curl -sS -w "%{http_code}" -u "${JFROG_USER}:${JFROG_TOKEN}" -o /tmp/resp.json "$url" || true)
              echo "GET $url -> HTTP $HTTP (attempt $i/$tries)"
              [[ "$HTTP" == "200" ]] && { cat /tmp/resp.json; return 0; }
              sleep 3
            done
            return 1
          }

          # 2) Try GAVC search first
          GAVC_URL="${JF_URL%/}/artifactory/api/search/gavc?g=${GID}&a=${AID}&v=${NEW_VERSION}&p=jar&r=${SNAP_REPO}"
          echo "GAVC query: $GAVC_URL"
          GAVC_JSON=$(retry_curl_json "$GAVC_URL" || echo "{}")
          ITEM_URI=$(echo "$GAVC_JSON" | jq -r '.results[0].uri // empty')

          # 3) If GAVC not ready, compute exact file name from maven-metadata.xml
          if [[ -z "$ITEM_URI" ]]; then
            META_URL="${JF_URL%/}/artifactory/${SNAP_REPO}/${GROUP_PATH}/${AID}/${NEW_VERSION}/maven-metadata.xml"
            echo "Fetching metadata: $META_URL"
            META_XML=$(curl -sS -u "${JFROG_USER}:${JFROG_TOKEN}" "$META_URL" || true)
            echo "$META_XML" | head -n 40 || true

            TS=$(echo "$META_XML" | grep -oP '(?<=<timestamp>)[^<]+' | head -n1 || true)
            BN=$(echo "$META_XML" | grep -oP '(?<=<buildNumber>)[^<]+' | head -n1 || true)
            if [[ -z "${TS}" || -z "${BN}" ]]; then
              echo "::error::Could not parse maven-metadata.xml to construct snapshot filename."
              exit 1
            fi
            REMOTE_FILE="${AID}-${BASE}-${TS}-${BN}.jar"
            STORAGE_URL="${JF_URL%/}/artifactory/api/storage/${SNAP_REPO}/${GROUP_PATH}/${AID}/${NEW_VERSION}/${REMOTE_FILE}"
          else
            # ITEM_URI from GAVC is already a storage URL pointing to the artifact item
            STORAGE_URL="$ITEM_URI"
            REMOTE_FILE=$(basename "$(echo "$ITEM_URI" | sed 's|.*/||')")
          fi

          echo "Storage URL: $STORAGE_URL"
          echo "Remote file: $REMOTE_FILE"

          # 4) Fetch checksums from storage API (with short retry)
          STORAGE_JSON=$(retry_curl_json "$STORAGE_URL" || echo "{}")
          echo "$STORAGE_JSON" | jq . | head -n 50 || true
          REMOTE_SHA256=$(echo "$STORAGE_JSON" | jq -r '.checksums.sha256 // empty')
          if [[ -z "$REMOTE_SHA256" ]]; then
            echo "::error::No sha256 found in storage JSON."
            exit 1
          fi

          # 5) Compare with local sha256
          LOCAL_SHA256=$(cut -d' ' -f1 "${ARTIFACT_DIR}/${LOCAL_NAME}.sha256")
          echo "Remote sha256: $REMOTE_SHA256"
          echo "Local  sha256: $LOCAL_SHA256"

          if [[ "$REMOTE_SHA256" != "$LOCAL_SHA256" ]]; then
            echo "::error::Checksum mismatch."; exit 1
          fi
          echo "Checksum match ✅"

      - name: Upload artifact (local copy + sha256)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.stage.outputs.out_name }}
          path: ${{ env.ARTIFACT_DIR }}/*
