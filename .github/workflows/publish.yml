# .github/workflows/publish.yml
# Simple & consistent: build, test, and publish JAR to JFrog Artifactory (no <distributionManagement>).
# - Single Maven invocation for reproducibility (same JAR locally and in Artifactory)
# - Version is rewritten to include commit id so Artifactory filenames include commit+timestamp
# - Local copy named with commit+timestamp + SHA256/SHA512 uploaded as workflow artifact
# - Optional checksum verification against Artifactory using GAVC search

name: Build and Publish to JFrog Artifactory

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    env:
      # Required configuration:
      #   Secrets:  JFROG_USER, JFROG_TOKEN
      #   Variables: JF_URL (e.g., https://yourorg.jfrog.io),
      #              JF_MVN_SNAPSHOTS_REPO (e.g., maven-snapshots-local)
      JFROG_USER:  ${{ secrets.JFROG_USER }}
      JFROG_TOKEN: ${{ secrets.JFROG_TOKEN }}
      JF_URL:      ${{ vars.JF_URL }}
      SNAP_REPO:   ${{ vars.JF_MVN_SNAPSHOTS_REPO }}

      ARTIFACT_DIR: dist
      MVN_FLAGS: "-B -ntp -C -e"  # batch, no transfer progress, strict checksums, stacktraces

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Writes ~/.m2/settings.xml with <server id="artifactory"> using ENV VAR NAMES below
      - name: Set up JDK 17 + Maven server creds
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: maven
          server-id: artifactory
          server-username: JFROG_USER      # NAME of env var (not the secret value)
          server-password: JFROG_TOKEN     # NAME of env var (not the secret value)

      - name: Java & Maven versions
        shell: bash
        run: |
          set -eux
          java -version
          mvn -version

      - name: Build timestamp (from last commit)
        id: ts
        shell: bash
        run: |
          set -euo pipefail
          COMMIT_TS=$(git log -1 --format=%ct)
          echo "iso=$(date -u -d @${COMMIT_TS} +%Y-%m-%dT%H:%M:%SZ)" >> "$GITHUB_OUTPUT"
          echo "compact=$(date -u -d @${COMMIT_TS} +%Y%m%dT%H%M%SZ)" >> "$GITHUB_OUTPUT"

      - name: Set version to include commit id
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          APP_VER=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.version)
          BASE="${APP_VER%-SNAPSHOT}"                 # strip -SNAPSHOT if present
          SHORT_SHA="${GITHUB_SHA::7}"
          NEW_VER="${BASE}-g${SHORT_SHA}-SNAPSHOT"    # e.g., 3.5.0-gabc1234-SNAPSHOT
          echo "Setting new version: ${NEW_VER}"
          mvn -q -DgenerateBackupPoms=false versions:set -DnewVersion="${NEW_VER}"
          echo "new_version=${NEW_VER}" >> "$GITHUB_OUTPUT"

      - name: Build, test, and deploy to Artifactory (single invocation)
        id: deploy
        shell: bash
        env:
          DEPLOY_URL: ${{ env.JF_URL }}/artifactory/${{ env.SNAP_REPO }}
        run: |
          set -euo pipefail
          # Single run -> identical bits locally and uploaded
          mvn $MVN_FLAGS \
            -Dproject.build.outputTimestamp="${{ steps.ts.outputs.iso }}" \
            -DaltDeploymentRepository=artifactory::default::"${DEPLOY_URL}" \
            clean deploy

      - name: Create local copy + checksums (commit + timestamp)
        id: stage
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${ARTIFACT_DIR}"
          SRC_JAR=$(ls target/*.jar | head -n1)   # built by the same invocation above
          OUT_JAR="spring-petclinic-${{ steps.ver.outputs.new_version }}-${{ steps.ts.outputs.compact }}.jar"
          cp "${SRC_JAR}" "${ARTIFACT_DIR}/${OUT_JAR}"
          (cd "${ARTIFACT_DIR}" && sha256sum "${OUT_JAR}" > "${OUT_JAR}.sha256")
          (cd "${ARTIFACT_DIR}" && sha512sum "${OUT_JAR}" > "${OUT_JAR}.sha512")
          echo "local_sha256=$(cut -d' ' -f1 ${ARTIFACT_DIR}/${OUT_JAR}.sha256)" >> "$GITHUB_OUTPUT"
          echo "out_jar=${OUT_JAR}" >> "$GITHUB_OUTPUT"

      - name: (Optional) Verify remote == local checksum
        if: ${{ always() }}
        shell: bash
        env:
          NEW_VERSION: ${{ steps.ver.outputs.new_version }}
        run: |
          set -euo pipefail
          # Look up deployed artifact via GAVC and compare sha256
          GID=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.groupId)
          AID=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.artifactId)
          Q="${JF_URL%/}/artifactory/api/search/gavc?g=${GID}&a=${AID}&v=${NEW_VERSION}&p=jar&r=${SNAP_REPO}"
          ITEM_URI=$(curl -s -u "${JFROG_USER}:${JFROG_TOKEN}" "$Q" | jq -r '.results[0].uri' || true)
          if [[ -z "${ITEM_URI}" || "${ITEM_URI}" == "null" ]]; then
            echo "Could not find the deployed artifact to verify (OK for first run / race)."; exit 0
          fi
          REMOTE_SHA=$(curl -s -u "${JFROG_USER}:${JFROG_TOKEN}" "${ITEM_URI}" | jq -r '.checksums.sha256')
          LOCAL_SHA="${{ steps.stage.outputs.local_sha256 }}"
          echo "Local SHA256 : ${LOCAL_SHA}"
          echo "Remote SHA256: ${REMOTE_SHA}"
          if [[ -n "${REMOTE_SHA}" && "${REMOTE_SHA}" == "${LOCAL_SHA}" ]]; then
            echo "Checksum match âœ…"
          else
            echo "::warning::Checksum mismatch or remote not ready yet."
          fi

      - name: Upload workflow artifacts (local copy + checksums)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jar-${{ github.sha }}
          path: ${{ env.ARTIFACT_DIR }}/*
